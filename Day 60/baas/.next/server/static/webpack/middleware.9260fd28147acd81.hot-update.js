"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./app/_lib/data-service.js":
/*!**********************************!*\
  !*** ./app/_lib/data-service.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGuest: () => (/* binding */ createGuest),\n/* harmony export */   getBookedDatesByCabinId: () => (/* binding */ getBookedDatesByCabinId),\n/* harmony export */   getBooking: () => (/* binding */ getBooking),\n/* harmony export */   getBookings: () => (/* binding */ getBookings),\n/* harmony export */   getCabin: () => (/* binding */ getCabin),\n/* harmony export */   getCabinPrice: () => (/* binding */ getCabinPrice),\n/* harmony export */   getCabins: () => (/* binding */ getCabins),\n/* harmony export */   getCountries: () => (/* binding */ getCountries),\n/* harmony export */   getGuest: () => (/* binding */ getGuest),\n/* harmony export */   getSettings: () => (/* binding */ getSettings)\n/* harmony export */ });\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/navigation */ \"(middleware)/./node_modules/next/dist/esm/api/navigation.js\");\n/* harmony import */ var _barrel_optimize_names_eachDayOfInterval_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=eachDayOfInterval!=!date-fns */ \"(middleware)/./node_modules/date-fns/eachDayOfInterval.mjs\");\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./supabase */ \"(middleware)/./app/_lib/supabase.js\");\n\n\n\n/////////////\n// GET\nasync function getCabin(id) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"cabins\").select(\"*\").eq(\"id\", id).single();\n    // For testing\n    // await new Promise((res) => setTimeout(res, 2000));\n    if (error) {\n        console.error(error);\n        (0,next_navigation__WEBPACK_IMPORTED_MODULE_0__.notFound)();\n    }\n    return data;\n}\nasync function getCabinPrice(id) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"cabins\").select(\"regularPrice, discount\").eq(\"id\", id).single();\n    if (error) {\n        console.error(error);\n    }\n    return data;\n}\nconst getCabins = async function() {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"cabins\").select(\"id, name, maxCapacity, regularPrice, discount, image\").order(\"name\");\n    // For testing\n    // await new Promise((res) => setTimeout(res, 2000));\n    if (error) {\n        console.error(error);\n        throw new Error(\"Hotels and Homestay could not be loaded\");\n    }\n    return data;\n};\n// Guests are uniquely identified by their email address\nasync function getGuest(email) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"guests\").select(\"*\").eq(\"email\", email).single();\n    // No error here! We handle the possibility of no guest in the sign in callback\n    return data;\n}\nasync function getBooking(id) {\n    const { data, error, count } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"bookings\").select(\"*\").eq(\"id\", id).single();\n    if (error) {\n        console.error(error);\n        throw new Error(\"Booking could not get loaded\");\n    }\n    return data;\n}\nasync function getBookings(guestId) {\n    const { data, error, count } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"bookings\")// We actually also need data on the cabins as well. But let's ONLY take the data that we actually need, in order to reduce downloaded data.\n    .select(\"id, created_at, startDate, endDate, numNights, numGuests, totalPrice, guestId, cabinId, cabins(name, image)\").eq(\"guestId\", guestId).order(\"startDate\");\n    if (error) {\n        console.error(error);\n        throw new Error(\"Bookings could not get loaded\");\n    }\n    return data;\n}\nasync function getBookedDatesByCabinId(cabinId) {\n    let today = new Date();\n    today.setUTCHours(0, 0, 0, 0);\n    today = today.toISOString();\n    // Getting all bookings\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"bookings\").select(\"*\").eq(\"cabinId\", cabinId).or(`startDate.gte.${today},status.eq.checked-in`);\n    if (error) {\n        console.error(error);\n        throw new Error(\"Bookings could not get loaded\");\n    }\n    // Converting to actual dates to be displayed in the date picker\n    const bookedDates = data.map((booking)=>{\n        return (0,_barrel_optimize_names_eachDayOfInterval_date_fns__WEBPACK_IMPORTED_MODULE_2__.eachDayOfInterval)({\n            start: new Date(booking.startDate),\n            end: new Date(booking.endDate)\n        });\n    }).flat();\n    return bookedDates;\n}\nasync function getSettings() {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"settings\").select(\"*\").single();\n    // await new Promise((res) => setTimeout(res, 5000));\n    if (error) {\n        console.error(error);\n        throw new Error(\"Settings could not be loaded\");\n    }\n    return data;\n}\nasync function getCountries() {\n    try {\n        const res = await fetch(\"https://restcountries.com/v2/all?fields=name,flag\");\n        const countries = await res.json();\n        return countries;\n    } catch  {\n        throw new Error(\"Could not fetch countries\");\n    }\n}\n/////////////\n// CREATE\nasync function createGuest(newGuest) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"guests\").insert([\n        newGuest\n    ]);\n    if (error) {\n        console.error(error);\n        throw new Error(\"Guest could not be created\");\n    }\n    return data;\n} /*\nexport async function createBooking(newBooking) {\n  const { data, error } = await supabase\n    .from(\"bookings\")\n    .insert([newBooking])\n    // So that the newly created object gets returned!\n    .select()\n    .single();\n\n  if (error) {\n    console.error(error);\n    throw new Error(\"Booking could not be created\");\n  }\n\n  return data;\n}\n*/  /////////////\n // UPDATE\n /*\n// The updatedFields is an object which should ONLY contain the updated data\nexport async function updateGuest(id, updatedFields) {\n  const { data, error } = await supabase\n    .from(\"guests\")\n    .update(updatedFields)\n    .eq(\"id\", id)\n    .select()\n    .single();\n\n  if (error) {\n    console.error(error);\n    throw new Error(\"Guest could not be updated\");\n  }\n  return data;\n}\n\nexport async function updateBooking(id, updatedFields) {\n  const { data, error } = await supabase\n    .from(\"bookings\")\n    .update(updatedFields)\n    .eq(\"id\", id)\n    .select()\n    .single();\n\n  if (error) {\n    console.error(error);\n    throw new Error(\"Booking could not be updated\");\n  }\n  return data;\n}\n\n/////////////\n// DELETE\n\nexport async function deleteBooking(id) {\n  const { data, error } = await supabase.from(\"bookings\").delete().eq(\"id\", id);\n\n  if (error) {\n    console.error(error);\n    throw new Error(\"Booking could not be deleted\");\n  }\n  return data;\n}\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./app/_lib/data-service.js\n");

/***/ })

});